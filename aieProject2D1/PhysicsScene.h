// #includes, using, etc
#pragma once
#include <glm\vec2.hpp>
#include <vector>

// forward declarations
class PhysicsObject;

//--------------------------------------------------------------------------------------
// PhysicsScene object.
//--------------------------------------------------------------------------------------
class PhysicsScene
{
public:
	
	//--------------------------------------------------------------------------------------
	// Default Constructor.
	//--------------------------------------------------------------------------------------
	PhysicsScene();

	//--------------------------------------------------------------------------------------
	// Default Destructor
	//--------------------------------------------------------------------------------------
	~PhysicsScene();

	//--------------------------------------------------------------------------------------
	// AddActor: 
	//
	// Param:
	//		pActor:
	//--------------------------------------------------------------------------------------
	void AddActor(PhysicsObject* pActor);

	//--------------------------------------------------------------------------------------
	// RemoveActor: 
	//
	// Param:
	//		pActor:
	//--------------------------------------------------------------------------------------
	void RemoveActor(PhysicsObject* pActor);

	//--------------------------------------------------------------------------------------
	// Update: 
	//
	// Param:
	//		deltaTime:
	//--------------------------------------------------------------------------------------
	void Update(float deltaTime);

	//--------------------------------------------------------------------------------------
	// UpdateGizmos: 
	//--------------------------------------------------------------------------------------
	void UpdateGizmos();

	//--------------------------------------------------------------------------------------
	// DebugScene: 
	//--------------------------------------------------------------------------------------
	void DebugScene();
	
	//--------------------------------------------------------------------------------------
	// SetGravity:
	//
	// Param:
	//		v2Gravity:
	//--------------------------------------------------------------------------------------
	void SetGravity(const glm::vec2 v2Gravity) { m_v2Gravity = v2Gravity; }

	//--------------------------------------------------------------------------------------
	// GetGravity:
	//--------------------------------------------------------------------------------------
	glm::vec2 GetGravity() const { return m_v2Gravity; }

	//--------------------------------------------------------------------------------------
	// SetTimeStep: 
	//
	// Param:
	//		fTimeStep:
	//--------------------------------------------------------------------------------------
	void SetTimeStep(const float fTimeStep) { m_fTimeStep = fTimeStep; }

	//--------------------------------------------------------------------------------------
	// GetTimeStep: 
	//
	// Return:
	//		float:
	//--------------------------------------------------------------------------------------
	float GetTimeStep() const { return m_fTimeStep; }





	void checkForCollision(); 
	
	static bool plane2Plane(PhysicsObject*, PhysicsObject*); 
	static bool plane2Sphere(PhysicsObject*, PhysicsObject*); 
	static bool sphere2Plane(PhysicsObject*, PhysicsObject*); 
	static bool sphere2Sphere(PhysicsObject*, PhysicsObject*);
	static bool plane2Box(PhysicsObject*, PhysicsObject*);
	static bool sphere2Box(PhysicsObject*, PhysicsObject*);
	static bool box2Plane(PhysicsObject*, PhysicsObject*);
	static bool box2Sphere(PhysicsObject*, PhysicsObject*);
	static bool box2Box(PhysicsObject*, PhysicsObject*);





protected:
	
	//--------------------------------------------------------------------------------------
	// A vector2 for gravity
	//--------------------------------------------------------------------------------------
	glm::vec2 m_v2Gravity;

	//--------------------------------------------------------------------------------------
	// A float for time step
	//--------------------------------------------------------------------------------------
	float m_fTimeStep;

	//--------------------------------------------------------------------------------------
	// A dynamic array of PhysicsObject pointers.
	//--------------------------------------------------------------------------------------
	std::vector<PhysicsObject*> m_apActors;
};

